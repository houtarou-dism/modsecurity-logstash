input {
	beats {
		port => 5044
	}
}

filter{
	grok {
		match => { "message" => "---.*---A--\s(?<[block][a]>.)" }
	}
	grok {
		match => { "message" => "---.*---B--\s(?<[block][b]>.)" }
	}
	grok {
		match => { "message" => "---.*---C--\s(?<[block][c]>.)" }
	}
	grok {
		match => { "message" => "---.*---D--\s(?<[block][d]>.)" }
	}
	grok {
		match => { "message" => "---.*---E--\s(?<[block][e]>.)" }
	}
	grok {
		match => { "message" => "---.*---F--\s(?<[block][f]>.)" }
	}
	grok {
		match => { "message" => "---.*---G--\s(?<[block][g]>.)" }
	}
	grok {
		match => { "message" => "---.*---H--\s(?<[block][h]>.)" }
	}
	grok {
		match => { "message" => "---.*---I--\s(?<[block][i]>.)" }
	}
	grok {
		match => { "message" => "---.*---J--\s(?<[block][j]>.)" }
	}
	grok {
		match => { "message" => "---.*---K--\s(?<[block][k]>.)" }
	}
	grok {
		match => { "message" => "---.*---Z--\s(?<[block][z]>.)" }
	}
	if [block][a] and [block][a] !~ "^$" {
		grok {
			patterns_dir => ["/path/to/patterns"]
			match => { "message" => "%{BLOCK_A}" }
		}
		date {
			match => [ "log_date", "dd/MMM/yyyy:HH:mm:ss Z" ]
			target => "date"
		}
		geoip {
			source => "[source][ip]"
		}
	}
	if [block][b] and [block][b] !~ "^$" {
		grok {
			patterns_dir => ["/path/to/patterns"]
			match => { "message" => "%{BLOCK_B}" }
		}
		grok {
			match => { "message" => "Accept: %{DATA:[request][header][accept]}\n" }
		}
		grok {
			match => { "message" => "Cache-Control: %{DATA:[request][header][cache_control]}\n" }
		}
		grok {
			match => { "message" => "User-Agent: %{DATA:[request][header][user_agent]}\n" }
		}
		grok {
			match => { "message" => "Content-Type: %{DATA:[request][header][content_type]}\n" }
		}
		grok {
			match => { "message" => "Referer: %{URI:[request][header][referer]}\n" }
		}
		grok {
			match => { "message" => "Origin: %{URI:[request][header][origin]}\n" }
		}
		grok {
			match => { "message" => "Upgrade-Insecure-Requests: %{BASE10NUM:[request][header][upgrade_insecure_requests]}\n" }
		}
		grok {
			match => { "message" => "Content-Length: %{BASE10NUM:[request][header][content_length]}\n" }
		}
		grok {
			match => { "message" => "Connection: %{DATA:[request][header][connection]}\n" }
		}
		grok {
			match => { "message" => "Host: %{IP:[request][header][host]}\n" }
		}
		grok {
			match => { "message" => "Accept-Encoding: %{DATA:[request][header][accept_encoding]}\n" }
		}
		grok {
			match => { "message" => "Cookie: %{DATA:[request][header][cookie]}\n" }
		}
		grok {
			match => { "message" => "Accept-Language: %{DATA:[request][header][accept_language]}\n" }
		}
	}
	if [block][e] and [block][e] !~ "^$" {
		grok {
			match => { "message" => "---.*---E--\n%{DATA:[intended_response][body]}\n" }
		}
	}
	if [block][f] and [block][f] !~ "^$" {
		grok {
			patterns_dir => ["/path/to/patterns"]
			match => { "message" => "---.*---F--(.*\n)*?%{HTTP_VERSION:[response][headers][http_version]} %{INT:[response][headers][http_status]}\n" }
		}
		grok {
			match => { "message" => "---.*---F--(.*\n)*?Server: %{DATA:[response][headers][server]}\n" }
		}
		grok {
			match => { "message" => "---.*---F--(.*\n)*?Date: %{DATA:[response][headers][date]}\n" }
		}
		grok {
			match => { "message" => "---.*---F--(.*\n)*?Content-Length: %{BASE10NUM:[response][headers][content_length]}\n" }
		}
		grok {
			match => { "message" => "---.*---F--(.*\n)*?Content-Type: %{DATA:[response][headers][content_type]}\n" }
		}
		grok {
			match => { "message" => "---.*---F--(.*\n)*?Connection: %{DATA:[response][headers][connection]}\n" }
		}
	}
	if [block][h] and [block][h] !~ "^$" {
		grok {
            patterns_dir => ["/path/to/patterns"]
            match => 
            {
                "message" => "^%{MODSECURITY_1}"
            }
        }
		if [audit_log][1] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_1}"
				}
        	}
		}
		if [audit_log][2] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_2}"
				}
        	}
		}
		if [audit_log][3] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_3}"
				}
        	}
		}
		if [audit_log][4] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_4}"
				}
        	}
		}
		if [audit_log][5] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_5}"
				}
        	}
		}
		if [audit_log][6] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_6}"
				}
        	}
		}
		if [audit_log][7] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_7}"
				}
        	}
		}
		if [audit_log][8] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_8}"
				}
        	}
		}
		if [audit_log][9] {
			grok {
				patterns_dir => ["/path/to/patterns"]
				match => 
				{
					"message" => "%{MODSECURITY_PATTERN_9}"
				}
        	}
		}
		
	}
	mutate {
		remove_field => [ "message", "block" ]
	}
	#if [block][c] and [block][c] !~ "^$" {} Request Body
	#if [block][d] and [block][d] !~ "^$" {} intended response headers (NOT IMPLEMENTED)
	#if [block][g] and [block][g] !~ "^$" {} response body (NOT IMPLEMENTED)
	#if [block][i] and [block][i] !~ "^$" {} reduced multipart request body
	#if [block][j] and [block][j] !~ "^$" {} multipart files information (NOT IMPLEMENTED)
	#if [block][k] and [block][k] !~ "^$" {} matched rules information
	#if [block][z] and [block][z] !~ "^$" {} audit log footer
}

output {
    stdout {}
}
